# Generated from Python2.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from linguado.python2.Python2Parser import Python2Parser
from antlr4.Token  import CommonToken

class IndentStack:
    def __init__(self)    : self._s = []
    def empty(self)       : return len(self._s) == 0
    def push(self, wsval) : self._s.append(wsval)
    def pop(self)         : self._s.pop()
    def wsval(self)       : return self._s[-1] if len(self._s) > 0 else 0

class TokenQueue:
    def __init__(self)  : self._q = []
    def empty(self)     : return len(self._q) == 0
    def enq(self, t)    : self._q.append(t)
    def deq(self)       : return self._q.pop(0)


def serializedATN():
    return [
        4,0,82,689,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
        78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,1,0,1,0,1,1,1,1,1,1,1,1,1,
        2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,
        9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,
        1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,
        1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,
        1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,
        1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,
        1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,30,
        1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,
        1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,
        1,35,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,38,1,38,
        1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,41,
        1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,43,
        1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
        1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,48,1,48,
        1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,51,1,52,1,52,1,52,1,53,1,53,
        1,53,1,54,1,54,1,54,1,55,1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,
        1,59,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,1,63,1,63,1,64,1,64,
        1,64,1,65,1,65,1,66,1,66,1,67,1,67,1,67,1,67,1,67,1,67,1,68,1,68,
        1,68,1,68,1,68,1,68,1,69,1,69,5,69,429,8,69,10,69,12,69,432,9,69,
        1,70,1,70,1,70,4,70,437,8,70,11,70,12,70,438,1,70,1,70,1,70,3,70,
        444,8,70,1,70,4,70,447,8,70,11,70,12,70,448,3,70,451,8,70,1,70,1,
        70,4,70,455,8,70,11,70,12,70,456,1,70,3,70,460,8,70,1,70,1,70,4,
        70,464,8,70,11,70,12,70,465,1,70,3,70,469,8,70,3,70,471,8,70,1,70,
        4,70,474,8,70,11,70,12,70,475,1,70,1,70,5,70,480,8,70,10,70,12,70,
        483,9,70,1,70,1,70,4,70,487,8,70,11,70,12,70,488,3,70,491,8,70,1,
        70,1,70,3,70,495,8,70,1,70,4,70,498,8,70,11,70,12,70,499,3,70,502,
        8,70,1,70,3,70,505,8,70,1,70,4,70,508,8,70,11,70,12,70,509,1,70,
        1,70,1,70,3,70,515,8,70,1,70,4,70,518,8,70,11,70,12,70,519,1,70,
        3,70,523,8,70,1,70,3,70,526,8,70,3,70,528,8,70,1,71,3,71,531,8,71,
        1,71,3,71,534,8,71,1,71,3,71,537,8,71,1,71,3,71,540,8,71,3,71,542,
        8,71,1,71,1,71,1,71,4,71,547,8,71,11,71,12,71,548,1,71,3,71,552,
        8,71,1,71,3,71,555,8,71,1,71,3,71,558,8,71,1,71,5,71,561,8,71,10,
        71,12,71,564,9,71,1,71,1,71,1,71,1,71,4,71,570,8,71,11,71,12,71,
        571,1,71,3,71,575,8,71,1,71,3,71,578,8,71,1,71,3,71,581,8,71,1,71,
        5,71,584,8,71,10,71,12,71,587,9,71,1,71,1,71,1,71,1,71,1,71,1,71,
        1,71,1,71,5,71,597,8,71,10,71,12,71,600,9,71,1,71,1,71,1,71,1,71,
        1,71,1,71,1,71,1,71,1,71,1,71,5,71,612,8,71,10,71,12,71,615,9,71,
        1,71,1,71,1,71,3,71,620,8,71,1,72,3,72,623,8,72,1,72,4,72,626,8,
        72,11,72,12,72,627,1,72,1,72,1,72,5,72,633,8,72,10,72,12,72,636,
        9,72,1,72,3,72,639,8,72,1,72,1,72,1,72,3,72,644,8,72,1,72,1,72,1,
        72,1,72,1,73,4,73,651,8,73,11,73,12,73,652,1,73,1,73,1,73,1,73,1,
        74,1,74,5,74,661,8,74,10,74,12,74,664,9,74,1,74,1,74,1,75,1,75,1,
        75,1,76,1,76,1,76,1,77,1,77,1,77,1,78,1,78,1,78,1,79,1,79,1,79,1,
        80,1,80,1,80,1,81,1,81,1,81,1,81,2,598,613,0,82,1,1,3,2,5,3,7,4,
        9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
        33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
        55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,
        77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,
        99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,
        59,119,60,121,61,123,62,125,63,127,64,129,65,131,66,133,67,135,68,
        137,69,139,70,141,71,143,72,145,73,147,74,149,75,151,76,153,77,155,
        78,157,79,159,80,161,81,163,82,1,0,20,3,0,65,90,95,95,97,122,4,0,
        48,57,65,90,95,95,97,122,2,0,88,88,120,120,3,0,48,57,65,70,97,102,
        2,0,76,76,108,108,2,0,69,69,101,101,2,0,43,43,45,45,1,0,48,57,2,
        0,79,79,111,111,1,0,48,55,2,0,66,66,98,98,1,0,48,49,2,0,74,74,106,
        106,4,0,66,66,85,85,98,98,117,117,2,0,82,82,114,114,2,0,9,9,32,32,
        4,0,10,10,13,13,39,39,92,92,4,0,10,10,13,13,34,34,92,92,1,0,92,92,
        2,0,10,10,13,13,748,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,
        0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,
        0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,
        0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,
        0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,
        0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,
        0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,
        0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,
        0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,
        0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,
        0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,
        1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,
        0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,
        0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,
        135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,
        0,0,0,145,1,0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,
        1,0,0,0,0,155,1,0,0,0,0,157,1,0,0,0,0,159,1,0,0,0,0,161,1,0,0,0,
        0,163,1,0,0,0,1,165,1,0,0,0,3,167,1,0,0,0,5,171,1,0,0,0,7,173,1,
        0,0,0,9,175,1,0,0,0,11,177,1,0,0,0,13,179,1,0,0,0,15,182,1,0,0,0,
        17,184,1,0,0,0,19,187,1,0,0,0,21,190,1,0,0,0,23,193,1,0,0,0,25,196,
        1,0,0,0,27,199,1,0,0,0,29,202,1,0,0,0,31,205,1,0,0,0,33,208,1,0,
        0,0,35,212,1,0,0,0,37,216,1,0,0,0,39,220,1,0,0,0,41,224,1,0,0,0,
        43,227,1,0,0,0,45,231,1,0,0,0,47,236,1,0,0,0,49,242,1,0,0,0,51,251,
        1,0,0,0,53,258,1,0,0,0,55,264,1,0,0,0,57,271,1,0,0,0,59,276,1,0,
        0,0,61,278,1,0,0,0,63,281,1,0,0,0,65,288,1,0,0,0,67,293,1,0,0,0,
        69,296,1,0,0,0,71,303,1,0,0,0,73,306,1,0,0,0,75,311,1,0,0,0,77,316,
        1,0,0,0,79,322,1,0,0,0,81,326,1,0,0,0,83,330,1,0,0,0,85,338,1,0,
        0,0,87,343,1,0,0,0,89,350,1,0,0,0,91,357,1,0,0,0,93,360,1,0,0,0,
        95,364,1,0,0,0,97,368,1,0,0,0,99,370,1,0,0,0,101,372,1,0,0,0,103,
        375,1,0,0,0,105,378,1,0,0,0,107,381,1,0,0,0,109,384,1,0,0,0,111,
        387,1,0,0,0,113,390,1,0,0,0,115,392,1,0,0,0,117,394,1,0,0,0,119,
        396,1,0,0,0,121,399,1,0,0,0,123,401,1,0,0,0,125,403,1,0,0,0,127,
        405,1,0,0,0,129,407,1,0,0,0,131,410,1,0,0,0,133,412,1,0,0,0,135,
        414,1,0,0,0,137,420,1,0,0,0,139,426,1,0,0,0,141,527,1,0,0,0,143,
        541,1,0,0,0,145,643,1,0,0,0,147,650,1,0,0,0,149,658,1,0,0,0,151,
        667,1,0,0,0,153,670,1,0,0,0,155,673,1,0,0,0,157,676,1,0,0,0,159,
        679,1,0,0,0,161,682,1,0,0,0,163,685,1,0,0,0,165,166,5,64,0,0,166,
        2,1,0,0,0,167,168,5,100,0,0,168,169,5,101,0,0,169,170,5,102,0,0,
        170,4,1,0,0,0,171,172,5,58,0,0,172,6,1,0,0,0,173,174,5,61,0,0,174,
        8,1,0,0,0,175,176,5,44,0,0,176,10,1,0,0,0,177,178,5,42,0,0,178,12,
        1,0,0,0,179,180,5,42,0,0,180,181,5,42,0,0,181,14,1,0,0,0,182,183,
        5,59,0,0,183,16,1,0,0,0,184,185,5,43,0,0,185,186,5,61,0,0,186,18,
        1,0,0,0,187,188,5,45,0,0,188,189,5,61,0,0,189,20,1,0,0,0,190,191,
        5,42,0,0,191,192,5,61,0,0,192,22,1,0,0,0,193,194,5,47,0,0,194,195,
        5,61,0,0,195,24,1,0,0,0,196,197,5,37,0,0,197,198,5,61,0,0,198,26,
        1,0,0,0,199,200,5,38,0,0,200,201,5,61,0,0,201,28,1,0,0,0,202,203,
        5,124,0,0,203,204,5,61,0,0,204,30,1,0,0,0,205,206,5,94,0,0,206,207,
        5,61,0,0,207,32,1,0,0,0,208,209,5,60,0,0,209,210,5,60,0,0,210,211,
        5,61,0,0,211,34,1,0,0,0,212,213,5,62,0,0,213,214,5,62,0,0,214,215,
        5,61,0,0,215,36,1,0,0,0,216,217,5,42,0,0,217,218,5,42,0,0,218,219,
        5,61,0,0,219,38,1,0,0,0,220,221,5,47,0,0,221,222,5,47,0,0,222,223,
        5,61,0,0,223,40,1,0,0,0,224,225,5,62,0,0,225,226,5,62,0,0,226,42,
        1,0,0,0,227,228,5,100,0,0,228,229,5,101,0,0,229,230,5,108,0,0,230,
        44,1,0,0,0,231,232,5,112,0,0,232,233,5,97,0,0,233,234,5,115,0,0,
        234,235,5,115,0,0,235,46,1,0,0,0,236,237,5,98,0,0,237,238,5,114,
        0,0,238,239,5,101,0,0,239,240,5,97,0,0,240,241,5,107,0,0,241,48,
        1,0,0,0,242,243,5,99,0,0,243,244,5,111,0,0,244,245,5,110,0,0,245,
        246,5,116,0,0,246,247,5,105,0,0,247,248,5,110,0,0,248,249,5,117,
        0,0,249,250,5,101,0,0,250,50,1,0,0,0,251,252,5,114,0,0,252,253,5,
        101,0,0,253,254,5,116,0,0,254,255,5,117,0,0,255,256,5,114,0,0,256,
        257,5,110,0,0,257,52,1,0,0,0,258,259,5,114,0,0,259,260,5,97,0,0,
        260,261,5,105,0,0,261,262,5,115,0,0,262,263,5,101,0,0,263,54,1,0,
        0,0,264,265,5,105,0,0,265,266,5,109,0,0,266,267,5,112,0,0,267,268,
        5,111,0,0,268,269,5,114,0,0,269,270,5,116,0,0,270,56,1,0,0,0,271,
        272,5,102,0,0,272,273,5,114,0,0,273,274,5,111,0,0,274,275,5,109,
        0,0,275,58,1,0,0,0,276,277,5,46,0,0,277,60,1,0,0,0,278,279,5,97,
        0,0,279,280,5,115,0,0,280,62,1,0,0,0,281,282,5,103,0,0,282,283,5,
        108,0,0,283,284,5,111,0,0,284,285,5,98,0,0,285,286,5,97,0,0,286,
        287,5,108,0,0,287,64,1,0,0,0,288,289,5,101,0,0,289,290,5,120,0,0,
        290,291,5,101,0,0,291,292,5,99,0,0,292,66,1,0,0,0,293,294,5,105,
        0,0,294,295,5,110,0,0,295,68,1,0,0,0,296,297,5,97,0,0,297,298,5,
        115,0,0,298,299,5,115,0,0,299,300,5,101,0,0,300,301,5,114,0,0,301,
        302,5,116,0,0,302,70,1,0,0,0,303,304,5,105,0,0,304,305,5,102,0,0,
        305,72,1,0,0,0,306,307,5,101,0,0,307,308,5,108,0,0,308,309,5,105,
        0,0,309,310,5,102,0,0,310,74,1,0,0,0,311,312,5,101,0,0,312,313,5,
        108,0,0,313,314,5,115,0,0,314,315,5,101,0,0,315,76,1,0,0,0,316,317,
        5,119,0,0,317,318,5,104,0,0,318,319,5,105,0,0,319,320,5,108,0,0,
        320,321,5,101,0,0,321,78,1,0,0,0,322,323,5,102,0,0,323,324,5,111,
        0,0,324,325,5,114,0,0,325,80,1,0,0,0,326,327,5,116,0,0,327,328,5,
        114,0,0,328,329,5,121,0,0,329,82,1,0,0,0,330,331,5,102,0,0,331,332,
        5,105,0,0,332,333,5,110,0,0,333,334,5,97,0,0,334,335,5,108,0,0,335,
        336,5,108,0,0,336,337,5,121,0,0,337,84,1,0,0,0,338,339,5,119,0,0,
        339,340,5,105,0,0,340,341,5,116,0,0,341,342,5,104,0,0,342,86,1,0,
        0,0,343,344,5,101,0,0,344,345,5,120,0,0,345,346,5,99,0,0,346,347,
        5,101,0,0,347,348,5,112,0,0,348,349,5,116,0,0,349,88,1,0,0,0,350,
        351,5,108,0,0,351,352,5,97,0,0,352,353,5,109,0,0,353,354,5,98,0,
        0,354,355,5,100,0,0,355,356,5,97,0,0,356,90,1,0,0,0,357,358,5,111,
        0,0,358,359,5,114,0,0,359,92,1,0,0,0,360,361,5,97,0,0,361,362,5,
        110,0,0,362,363,5,100,0,0,363,94,1,0,0,0,364,365,5,110,0,0,365,366,
        5,111,0,0,366,367,5,116,0,0,367,96,1,0,0,0,368,369,5,60,0,0,369,
        98,1,0,0,0,370,371,5,62,0,0,371,100,1,0,0,0,372,373,5,61,0,0,373,
        374,5,61,0,0,374,102,1,0,0,0,375,376,5,62,0,0,376,377,5,61,0,0,377,
        104,1,0,0,0,378,379,5,60,0,0,379,380,5,61,0,0,380,106,1,0,0,0,381,
        382,5,60,0,0,382,383,5,62,0,0,383,108,1,0,0,0,384,385,5,33,0,0,385,
        386,5,61,0,0,386,110,1,0,0,0,387,388,5,105,0,0,388,389,5,115,0,0,
        389,112,1,0,0,0,390,391,5,124,0,0,391,114,1,0,0,0,392,393,5,94,0,
        0,393,116,1,0,0,0,394,395,5,38,0,0,395,118,1,0,0,0,396,397,5,60,
        0,0,397,398,5,60,0,0,398,120,1,0,0,0,399,400,5,43,0,0,400,122,1,
        0,0,0,401,402,5,45,0,0,402,124,1,0,0,0,403,404,5,47,0,0,404,126,
        1,0,0,0,405,406,5,37,0,0,406,128,1,0,0,0,407,408,5,47,0,0,408,409,
        5,47,0,0,409,130,1,0,0,0,410,411,5,126,0,0,411,132,1,0,0,0,412,413,
        5,96,0,0,413,134,1,0,0,0,414,415,5,99,0,0,415,416,5,108,0,0,416,
        417,5,97,0,0,417,418,5,115,0,0,418,419,5,115,0,0,419,136,1,0,0,0,
        420,421,5,121,0,0,421,422,5,105,0,0,422,423,5,101,0,0,423,424,5,
        108,0,0,424,425,5,100,0,0,425,138,1,0,0,0,426,430,7,0,0,0,427,429,
        7,1,0,0,428,427,1,0,0,0,429,432,1,0,0,0,430,428,1,0,0,0,430,431,
        1,0,0,0,431,140,1,0,0,0,432,430,1,0,0,0,433,470,5,48,0,0,434,436,
        7,2,0,0,435,437,7,3,0,0,436,435,1,0,0,0,437,438,1,0,0,0,438,436,
        1,0,0,0,438,439,1,0,0,0,439,450,1,0,0,0,440,451,7,4,0,0,441,443,
        7,5,0,0,442,444,7,6,0,0,443,442,1,0,0,0,443,444,1,0,0,0,444,446,
        1,0,0,0,445,447,7,7,0,0,446,445,1,0,0,0,447,448,1,0,0,0,448,446,
        1,0,0,0,448,449,1,0,0,0,449,451,1,0,0,0,450,440,1,0,0,0,450,441,
        1,0,0,0,450,451,1,0,0,0,451,471,1,0,0,0,452,454,7,8,0,0,453,455,
        7,9,0,0,454,453,1,0,0,0,455,456,1,0,0,0,456,454,1,0,0,0,456,457,
        1,0,0,0,457,459,1,0,0,0,458,460,7,4,0,0,459,458,1,0,0,0,459,460,
        1,0,0,0,460,471,1,0,0,0,461,463,7,10,0,0,462,464,7,11,0,0,463,462,
        1,0,0,0,464,465,1,0,0,0,465,463,1,0,0,0,465,466,1,0,0,0,466,468,
        1,0,0,0,467,469,7,4,0,0,468,467,1,0,0,0,468,469,1,0,0,0,469,471,
        1,0,0,0,470,434,1,0,0,0,470,452,1,0,0,0,470,461,1,0,0,0,471,528,
        1,0,0,0,472,474,7,7,0,0,473,472,1,0,0,0,474,475,1,0,0,0,475,473,
        1,0,0,0,475,476,1,0,0,0,476,477,1,0,0,0,477,481,5,46,0,0,478,480,
        7,7,0,0,479,478,1,0,0,0,480,483,1,0,0,0,481,479,1,0,0,0,481,482,
        1,0,0,0,482,491,1,0,0,0,483,481,1,0,0,0,484,486,5,46,0,0,485,487,
        7,7,0,0,486,485,1,0,0,0,487,488,1,0,0,0,488,486,1,0,0,0,488,489,
        1,0,0,0,489,491,1,0,0,0,490,473,1,0,0,0,490,484,1,0,0,0,491,501,
        1,0,0,0,492,494,7,5,0,0,493,495,7,6,0,0,494,493,1,0,0,0,494,495,
        1,0,0,0,495,497,1,0,0,0,496,498,7,7,0,0,497,496,1,0,0,0,498,499,
        1,0,0,0,499,497,1,0,0,0,499,500,1,0,0,0,500,502,1,0,0,0,501,492,
        1,0,0,0,501,502,1,0,0,0,502,504,1,0,0,0,503,505,7,12,0,0,504,503,
        1,0,0,0,504,505,1,0,0,0,505,528,1,0,0,0,506,508,7,7,0,0,507,506,
        1,0,0,0,508,509,1,0,0,0,509,507,1,0,0,0,509,510,1,0,0,0,510,525,
        1,0,0,0,511,526,7,4,0,0,512,514,7,5,0,0,513,515,7,6,0,0,514,513,
        1,0,0,0,514,515,1,0,0,0,515,517,1,0,0,0,516,518,7,7,0,0,517,516,
        1,0,0,0,518,519,1,0,0,0,519,517,1,0,0,0,519,520,1,0,0,0,520,522,
        1,0,0,0,521,523,7,12,0,0,522,521,1,0,0,0,522,523,1,0,0,0,523,526,
        1,0,0,0,524,526,7,12,0,0,525,511,1,0,0,0,525,512,1,0,0,0,525,524,
        1,0,0,0,525,526,1,0,0,0,526,528,1,0,0,0,527,433,1,0,0,0,527,490,
        1,0,0,0,527,507,1,0,0,0,528,142,1,0,0,0,529,531,7,13,0,0,530,529,
        1,0,0,0,530,531,1,0,0,0,531,533,1,0,0,0,532,534,7,14,0,0,533,532,
        1,0,0,0,533,534,1,0,0,0,534,542,1,0,0,0,535,537,7,14,0,0,536,535,
        1,0,0,0,536,537,1,0,0,0,537,539,1,0,0,0,538,540,7,13,0,0,539,538,
        1,0,0,0,539,540,1,0,0,0,540,542,1,0,0,0,541,530,1,0,0,0,541,536,
        1,0,0,0,542,619,1,0,0,0,543,562,5,39,0,0,544,557,5,92,0,0,545,547,
        7,15,0,0,546,545,1,0,0,0,547,548,1,0,0,0,548,546,1,0,0,0,548,549,
        1,0,0,0,549,554,1,0,0,0,550,552,5,13,0,0,551,550,1,0,0,0,551,552,
        1,0,0,0,552,553,1,0,0,0,553,555,5,10,0,0,554,551,1,0,0,0,554,555,
        1,0,0,0,555,558,1,0,0,0,556,558,9,0,0,0,557,546,1,0,0,0,557,556,
        1,0,0,0,558,561,1,0,0,0,559,561,8,16,0,0,560,544,1,0,0,0,560,559,
        1,0,0,0,561,564,1,0,0,0,562,560,1,0,0,0,562,563,1,0,0,0,563,565,
        1,0,0,0,564,562,1,0,0,0,565,620,5,39,0,0,566,585,5,34,0,0,567,580,
        5,92,0,0,568,570,7,15,0,0,569,568,1,0,0,0,570,571,1,0,0,0,571,569,
        1,0,0,0,571,572,1,0,0,0,572,577,1,0,0,0,573,575,5,13,0,0,574,573,
        1,0,0,0,574,575,1,0,0,0,575,576,1,0,0,0,576,578,5,10,0,0,577,574,
        1,0,0,0,577,578,1,0,0,0,578,581,1,0,0,0,579,581,9,0,0,0,580,569,
        1,0,0,0,580,579,1,0,0,0,581,584,1,0,0,0,582,584,8,17,0,0,583,567,
        1,0,0,0,583,582,1,0,0,0,584,587,1,0,0,0,585,583,1,0,0,0,585,586,
        1,0,0,0,586,588,1,0,0,0,587,585,1,0,0,0,588,620,5,34,0,0,589,590,
        5,34,0,0,590,591,5,34,0,0,591,592,5,34,0,0,592,598,1,0,0,0,593,594,
        5,92,0,0,594,597,9,0,0,0,595,597,8,18,0,0,596,593,1,0,0,0,596,595,
        1,0,0,0,597,600,1,0,0,0,598,599,1,0,0,0,598,596,1,0,0,0,599,601,
        1,0,0,0,600,598,1,0,0,0,601,602,5,34,0,0,602,603,5,34,0,0,603,620,
        5,34,0,0,604,605,5,39,0,0,605,606,5,39,0,0,606,607,5,39,0,0,607,
        613,1,0,0,0,608,609,5,92,0,0,609,612,9,0,0,0,610,612,8,18,0,0,611,
        608,1,0,0,0,611,610,1,0,0,0,612,615,1,0,0,0,613,614,1,0,0,0,613,
        611,1,0,0,0,614,616,1,0,0,0,615,613,1,0,0,0,616,617,5,39,0,0,617,
        618,5,39,0,0,618,620,5,39,0,0,619,543,1,0,0,0,619,566,1,0,0,0,619,
        589,1,0,0,0,619,604,1,0,0,0,620,144,1,0,0,0,621,623,5,13,0,0,622,
        621,1,0,0,0,622,623,1,0,0,0,623,624,1,0,0,0,624,626,5,10,0,0,625,
        622,1,0,0,0,626,627,1,0,0,0,627,625,1,0,0,0,627,628,1,0,0,0,628,
        629,1,0,0,0,629,644,6,72,0,0,630,634,5,92,0,0,631,633,7,15,0,0,632,
        631,1,0,0,0,633,636,1,0,0,0,634,632,1,0,0,0,634,635,1,0,0,0,635,
        638,1,0,0,0,636,634,1,0,0,0,637,639,5,13,0,0,638,637,1,0,0,0,638,
        639,1,0,0,0,639,640,1,0,0,0,640,641,5,10,0,0,641,642,1,0,0,0,642,
        644,6,72,1,0,643,625,1,0,0,0,643,630,1,0,0,0,644,645,1,0,0,0,645,
        646,6,72,2,0,646,647,1,0,0,0,647,648,6,72,3,0,648,146,1,0,0,0,649,
        651,7,15,0,0,650,649,1,0,0,0,651,652,1,0,0,0,652,650,1,0,0,0,652,
        653,1,0,0,0,653,654,1,0,0,0,654,655,6,73,4,0,655,656,1,0,0,0,656,
        657,6,73,3,0,657,148,1,0,0,0,658,662,5,35,0,0,659,661,8,19,0,0,660,
        659,1,0,0,0,661,664,1,0,0,0,662,660,1,0,0,0,662,663,1,0,0,0,663,
        665,1,0,0,0,664,662,1,0,0,0,665,666,6,74,5,0,666,150,1,0,0,0,667,
        668,5,40,0,0,668,669,6,75,6,0,669,152,1,0,0,0,670,671,5,41,0,0,671,
        672,6,76,7,0,672,154,1,0,0,0,673,674,5,123,0,0,674,675,6,77,8,0,
        675,156,1,0,0,0,676,677,5,125,0,0,677,678,6,78,9,0,678,158,1,0,0,
        0,679,680,5,91,0,0,680,681,6,79,10,0,681,160,1,0,0,0,682,683,5,93,
        0,0,683,684,6,80,11,0,684,162,1,0,0,0,685,686,9,0,0,0,686,687,1,
        0,0,0,687,688,6,81,5,0,688,164,1,0,0,0,54,0,430,438,443,448,450,
        456,459,465,468,470,475,481,488,490,494,499,501,504,509,514,519,
        522,525,527,530,533,536,539,541,548,551,554,557,560,562,571,574,
        577,580,583,585,596,598,611,613,619,622,627,634,638,643,652,662,
        12,1,72,0,1,72,1,1,72,2,0,1,0,1,73,3,6,0,0,1,75,4,1,76,5,1,77,6,
        1,78,7,1,79,8,1,80,9
    ]

class Python2Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    T__39 = 40
    T__40 = 41
    T__41 = 42
    T__42 = 43
    T__43 = 44
    T__44 = 45
    T__45 = 46
    T__46 = 47
    T__47 = 48
    T__48 = 49
    T__49 = 50
    T__50 = 51
    T__51 = 52
    T__52 = 53
    T__53 = 54
    T__54 = 55
    T__55 = 56
    T__56 = 57
    T__57 = 58
    T__58 = 59
    T__59 = 60
    T__60 = 61
    T__61 = 62
    T__62 = 63
    T__63 = 64
    T__64 = 65
    T__65 = 66
    T__66 = 67
    T__67 = 68
    T__68 = 69
    NAME = 70
    NUMBER = 71
    STRING = 72
    LINENDING = 73
    WHITESPACE = 74
    COMMENT = 75
    OPEN_PAREN = 76
    CLOSE_PAREN = 77
    OPEN_BRACE = 78
    CLOSE_BRACE = 79
    OPEN_BRACKET = 80
    CLOSE_BRACKET = 81
    UNKNOWN = 82

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'@'", "'def'", "':'", "'='", "','", "'*'", "'**'", "';'", "'+='", 
            "'-='", "'*='", "'/='", "'%='", "'&='", "'|='", "'^='", "'<<='", 
            "'>>='", "'**='", "'//='", "'>>'", "'del'", "'pass'", "'break'", 
            "'continue'", "'return'", "'raise'", "'import'", "'from'", "'.'", 
            "'as'", "'global'", "'exec'", "'in'", "'assert'", "'if'", "'elif'", 
            "'else'", "'while'", "'for'", "'try'", "'finally'", "'with'", 
            "'except'", "'lambda'", "'or'", "'and'", "'not'", "'<'", "'>'", 
            "'=='", "'>='", "'<='", "'<>'", "'!='", "'is'", "'|'", "'^'", 
            "'&'", "'<<'", "'+'", "'-'", "'/'", "'%'", "'//'", "'~'", "'`'", 
            "'class'", "'yield'", "'('", "')'", "'{'", "'}'", "'['", "']'" ]

    symbolicNames = [ "<INVALID>",
            "NAME", "NUMBER", "STRING", "LINENDING", "WHITESPACE", "COMMENT", 
            "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", 
            "CLOSE_BRACKET", "UNKNOWN" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "T__38", "T__39", "T__40", "T__41", "T__42", "T__43", 
                  "T__44", "T__45", "T__46", "T__47", "T__48", "T__49", 
                  "T__50", "T__51", "T__52", "T__53", "T__54", "T__55", 
                  "T__56", "T__57", "T__58", "T__59", "T__60", "T__61", 
                  "T__62", "T__63", "T__64", "T__65", "T__66", "T__67", 
                  "T__68", "NAME", "NUMBER", "STRING", "LINENDING", "WHITESPACE", 
                  "COMMENT", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACE", 
                  "CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET", "UNKNOWN" ]

    grammarFileName = "Python2.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


        # Indented to append code to the constructor.
        self._openBRCount       = 0
        self._suppressNewlines  = False
        self._lineContinuation  = False
        self._tokens            = TokenQueue()
        self._indents           = IndentStack()

    def nextToken(self):
        if not self._tokens.empty():
            return self._tokens.deq()
        else:
            t = super(Python2Lexer, self).nextToken()
            if t.type != Token.EOF:
                return t
            else:
                if not self._suppressNewlines:
                    self.emitNewline()
                self.emitFullDedent()
                self.emitEndmarker()
                self.emitEndToken(t)
                return self._tokens.deq()
                
    def emitEndToken(self, token):
        self._tokens.enq(token)

    def emitIndent(self, length=0, text='INDENT'):
        t = self.createToken(Python2Parser.INDENT, text, length)
        self._tokens.enq(t)

    def emitDedent(self):
        t = self.createToken(Python2Parser.DEDENT, 'DEDENT')
        self._tokens.enq(t)

    def emitFullDedent(self):
        while not self._indents.empty():
            self._indents.pop()
            self.emitDedent()

    def emitEndmarker(self):
        t = self.createToken(Python2Parser.ENDMARKER, 'ENDMARKER')
        self._tokens.enq(t)

    def emitNewline(self):
        t = self.createToken(Python2Parser.NEWLINE, 'NEWLINE')
        self._tokens.enq(t)

    def createToken(self, type_, text="", length=0):
        start = self._tokenStartCharIndex
        stop = start + length
        t = CommonToken(self._tokenFactorySourcePair,
                        type_, self.DEFAULT_TOKEN_CHANNEL,
                        start, stop)
        t.text = text
        return t


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[72] = self.LINENDING_action 
            actions[73] = self.WHITESPACE_action 
            actions[75] = self.OPEN_PAREN_action 
            actions[76] = self.CLOSE_PAREN_action 
            actions[77] = self.OPEN_BRACE_action 
            actions[78] = self.CLOSE_BRACE_action 
            actions[79] = self.OPEN_BRACKET_action 
            actions[80] = self.CLOSE_BRACKET_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def LINENDING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self._lineContinuation=False
     

        if actionIndex == 1:
            self._lineContinuation=True
     

        if actionIndex == 2:

            if self._openBRCount == 0 and not self._lineContinuation:
                if not self._suppressNewlines:
                    self.emitNewline()
                    self._suppressNewlines = True
                la = self._input.LA(1)
                if la not in [ord(' '), ord('\t'), ord('#')]:
                    self._suppressNewlines = False
                    self.emitFullDedent()

     

    def WHITESPACE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:

            if (self._tokenStartColumn == 0 and self._openBRCount == 0
                and not self._lineContinuation):

                la = self._input.LA(1)
                if la not in [ord('\r'), ord('\n'), ord('#'), -1]:
                    self._suppressNewlines = False
                    wsCount = 0
                    for ch in self.text:
                        if   ch == ' ' : wsCount += 1
                        elif ch == '\t': wsCount += 8

                    if wsCount > self._indents.wsval():
                        self.emitIndent(len(self.text))
                        self._indents.push(wsCount)
                    else:
                        while wsCount < self._indents.wsval():
                            self.emitDedent()
                            self._indents.pop()
                        if wsCount != self._indents.wsval():
                            raise Exception()

     

    def OPEN_PAREN_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 4:
            self._openBRCount  += 1
     

    def CLOSE_PAREN_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 5:
            self._openBRCount  -= 1
     

    def OPEN_BRACE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 6:
            self._openBRCount  += 1
     

    def CLOSE_BRACE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 7:
            self._openBRCount  -= 1
     

    def OPEN_BRACKET_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 8:
            self._openBRCount  += 1
     

    def CLOSE_BRACKET_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 9:
            self._openBRCount  -= 1
     


